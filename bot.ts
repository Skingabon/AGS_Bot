import { Bot, Context, session, SessionFlavor, InlineKeyboard } from 'grammy';
import 'dotenv/config';
import { sendToAmoCRM as sendToAmoFromApi } from './api'; // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
import type { Lead } from './api';
import { sendService } from './emailSender';

// const userEmail = process.env.RECEIVER_EMAIL; // –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ

// –¢–∏–ø—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
export interface SessionData {
  selectedGas?:
    | 'N2'
    | 'O2'
    | '–í–æ–¥–æ—Ä–æ–¥'
    | '–û—Å—É—à–∫–∞'
    | '–ó–∞—è–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É –ê–ì–°';
  industry?: string;
  knowsParams?: boolean;
  performance?: string;
  dewPoint?: string;
  pressure?: string;
  purity?: string;
  contacts?: string;
  information?: string;
  calculator?: CalculatorSession;
  calculatorStep?: number;
}

export interface CalculatorSession {
  consumptionYear?: number;
  pricePerM3?: number;
  costPerM3?: number;
  equipmentCost?: number;
}

type MyContext = Context & SessionFlavor<SessionData>;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
const otrasl = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:';
const stoimostN2 =
  '–í–≤–µ–¥–µ—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∑–æ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–æ—á–∫—É —Ä–æ—Å—ã –∏ —Ç.–¥.)?';
const stoimostO2 =
  '–Ø –ø–æ–∫–∞–∂—É –≤–∞–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏, —Å–º–æ–∂–µ—Ç–µ –∏—Ö –≤–≤–µ—Å—Ç–∏?';
const stoimostVod =
  '–Ø –ø–æ–∫–∞–∂—É –≤–∞–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥–æ—Ä–æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏, —Å–º–æ–∂–µ—Ç–µ –∏—Ö –≤–≤–µ—Å—Ç–∏?';
const stoimostOsu =
  '–Ø –ø–æ–∫–∞–∂—É –≤–∞–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å—É—à–∏—Ç–µ–ª—è, —Å–º–æ–∂–µ—Ç–µ –∏—Ö –≤–≤–µ—Å—Ç–∏?';
const serviceAGS = '–û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot<MyContext>(process.env.BOT_API_KEY || '');

bot.api.setMyCommands([{ command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' }]);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
bot.use(session({ initial: (): SessionData => ({}) }));

// ==================== –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ ====================
function calcPayback({
  consumptionYear, // –≥–æ–¥–æ–≤–æ–π —Ä–∞—Å—Ö–æ–¥ –º¬≥
  pricePerM3, // —Ü–µ–Ω–∞ –∑–∞ –º¬≥ (–±–∞–ª–ª–æ–Ω—ã)
  equipmentCost, // —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
}: {
  consumptionYear: number;
  pricePerM3: number;
  equipmentCost: number;
}) {
  const current = consumptionYear * pricePerM3;
  const newCost = consumptionYear * 10;
  const economy = current - newCost;
  const paybackYears = equipmentCost / economy;
  const paybackMonths = paybackYears * 12;

  return {
    current,
    newCost,
    economy,
    paybackYears,
    paybackMonths,
  };
}

const getStartedMenu = async (ctx: MyContext) => {
  // –û—á–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  delete ctx.session.calculatorStep;
  delete ctx.session.calculator;
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callbackQuery, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–Ω–µ –≤–∏—Å–µ–ª–∞"
  if (ctx.callbackQuery) {
    await ctx.answerCallbackQuery();
  }
  const keyboard = new InlineKeyboard()
    .text('N2', 'button_N2')
    .text('O2', 'button_O2')
    .row()
    .text('–í–æ–¥–æ—Ä–æ–¥', 'button_vod')
    .text('–û—Å—É—à–∫–∞', 'button_osu')
    .row()
    .text('–ó–∞—è–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É –ê–ì–°', 'button_service')
    .row()
    .text('üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã–≥–æ–¥—ã', 'button_calculator');

  await ctx.reply(
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º.\n\nüéÅ –£ –Ω–∞—Å –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω—ã–π –±–æ–Ω—É—Å!\n\n' +
      '–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —É–¥–æ–±–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã–≥–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∂–µ—Ç:\n‚úÖ —Å–∫–æ–ª—å–∫–æ –≤—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç–µ —Å –Ω–∞—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º' +
      '\n‚úÖ —Å–∫–æ–ª—å–∫–æ –≤—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç–µ —Å –Ω–∞—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –ê–ì–° –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤—ã–≥–æ–¥—É —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è!',
    {
      reply_markup: keyboard,
    },
  );
};

// ==================== –ö–æ–º–∞–Ω–¥–∞ /start ====================
bot.callbackQuery('start', getStartedMenu);

bot.command('start', getStartedMenu);

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ====================

// ------ –ë–ª–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ ------
bot.callbackQuery('button_service', async (ctx) => {
  ctx.session.selectedGas = '–ó–∞—è–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É –ê–ì–°';
  const keyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', 'button_otvet').row();
  await ctx.reply(serviceAGS, { reply_markup: keyboard });
});

bot.callbackQuery('button_otvet', async (ctx) => {
  ctx.session.knowsParams = true;
  await ctx.reply(
    '–£–∫–∞–∂–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —Ç–∏–ø –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, email):',
  );
});

// ------ –ë–ª–æ–∫ N2 ------
bot.callbackQuery('button_N2', async (ctx) => {
  ctx.session.selectedGas = 'N2';
  const keyboard = new InlineKeyboard()
    .text('–õ–∞–∑–µ—Ä–Ω–∞—è —Ä–µ–∑–∫–∞', 'button_laser')
    .row()
    .text('–ü–∏—â–µ–≤–∞—è', 'button_eda')
    .row()
    .text('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'button_electro')
    .row()
    .text('–î—Ä—É–≥–∞—è –æ—Ç—Ä–∞—Å–ª—å', 'button_other');

  await ctx.reply(otrasl, { reply_markup: keyboard });
});

// ------ –ë–ª–æ–∫ O2 ------
bot.callbackQuery('button_O2', async (ctx) => {
  ctx.session.selectedGas = 'O2';
  const keyboard = new InlineKeyboard()
    .text('–†—ã–±–æ—Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'button_fish')
    .row()
    .text('–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', 'button_metal')
    .row()
    .text('–î—Ä—É–≥–∞—è –æ—Ç—Ä–∞—Å–ª—å', 'button_other');

  await ctx.reply(otrasl, { reply_markup: keyboard });
});

// ------ –ë–ª–æ–∫ –í–æ–¥–æ—Ä–æ–¥ ------
bot.callbackQuery('button_vod', async (ctx) => {
  ctx.session.selectedGas = '–í–æ–¥–æ—Ä–æ–¥';
  const keyboard = new InlineKeyboard()
    .text('–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', 'button_energetika')
    .row()
    .text('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'button_electro')
    .row()
    .text('–î—Ä—É–≥–∞—è –æ—Ç—Ä–∞—Å–ª—å', 'button_other');

  await ctx.reply(otrasl, { reply_markup: keyboard });
});

// ------ –ë–ª–æ–∫ –û—Å—É—à–∫–∞ ------
bot.callbackQuery('button_osu', async (ctx) => {
  ctx.session.selectedGas = '–û—Å—É—à–∫–∞';
  const keyboard = new InlineKeyboard()
    .text('–ê–¥—Å–æ—Ä–±—Ü–∏–æ–Ω–Ω—ã–π (—Ö–æ–ª–æ–¥–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)', 'button_ahr')
    .row()
    .text('–ê–¥—Å–æ—Ä–±—Ü–∏–æ–Ω–Ω—ã–π (–≥–æ—Ä—è—á–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)', 'button_agr');

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Å—É—à–∏—Ç–µ–ª—è:', { reply_markup: keyboard });
});

// ------ –î–ª—è N2 ------
bot.callbackQuery('button_laser', async (ctx) => {
  ctx.session.industry = '–õ–∞–∑–µ—Ä–Ω–∞—è —Ä–µ–∑–∫–∞';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostN2, { reply_markup: keyboard });
});

bot.callbackQuery('button_eda', async (ctx) => {
  ctx.session.industry = '–ü–∏—â–µ–≤–∞—è';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostN2, { reply_markup: keyboard });
});

bot.callbackQuery('button_electro', async (ctx) => {
  ctx.session.industry = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostN2, { reply_markup: keyboard });
});

bot.callbackQuery('button_other', async (ctx) => {
  ctx.session.industry = '–î—Ä—É–≥–∞—è –æ—Ç—Ä–∞—Å–ª—å';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostN2, { reply_markup: keyboard });
});

// ------ –î–ª—è O2 ------
bot.callbackQuery('button_fish', async (ctx) => {
  ctx.session.industry = '–†—ã–±–æ—Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostO2, { reply_markup: keyboard });
});

bot.callbackQuery('button_metal', async (ctx) => {
  ctx.session.industry = '–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostO2, { reply_markup: keyboard });
});

bot.callbackQuery('button_other', async (ctx) => {
  ctx.session.industry = '–î—Ä—É–≥–∞—è –æ—Ç—Ä–∞—Å–ª—å';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostO2, { reply_markup: keyboard });
});

// ------ –î–ª—è –í–æ–¥–æ—Ä–æ–¥–∞ ------
bot.callbackQuery('button_energetika', async (ctx) => {
  ctx.session.industry = '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostVod, { reply_markup: keyboard });
});

bot.callbackQuery('button_electro', async (ctx) => {
  ctx.session.industry = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostVod, { reply_markup: keyboard });
});

bot.callbackQuery('button_other', async (ctx) => {
  ctx.session.industry = '–î—Ä—É–≥–∞—è –æ—Ç—Ä–∞—Å–ª—å';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .text('–ù–ï–¢', 'button_no');
  await ctx.reply(stoimostVod, { reply_markup: keyboard });
});

// ------ –î–ª—è –û—Å—É—à–∏—Ç–µ–ª—è ------
bot.callbackQuery('button_ahr', async (ctx) => {
  ctx.session.industry = '–ê–¥—Å–æ—Ä–±—Ü–∏–æ–Ω–Ω—ã–π (—Ö–æ–ª–æ–¥–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yesOsush')
    .text('–ù–ï–¢', 'button_noOsush');
  await ctx.reply(stoimostOsu, { reply_markup: keyboard });
});

bot.callbackQuery('button_agr', async (ctx) => {
  ctx.session.industry = '–ê–¥—Å–æ—Ä–±—Ü–∏–æ–Ω–Ω—ã–π (–≥–æ—Ä—è—á–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)';
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yesOsush')
    .text('–ù–ï–¢', 'button_noOsush');
  await ctx.reply(stoimostOsu, { reply_markup: keyboard });
});

// ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ "–î–ê/–ù–ï–¢" ====================
bot.callbackQuery(['button_yes', 'button_yesOsush'], async (ctx) => {
  ctx.session.knowsParams = true;
  await ctx.reply('1. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–º¬≥/—á–∞—Å):');
});

bot.callbackQuery(['button_no', 'button_noOsush'], async (ctx) => {
  ctx.session.knowsParams = false;
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (email, —Ç–µ–ª–µ—Ñ–æ–Ω):');
});

// ==================== –ö–Ω–æ–ø–∫–∞ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" ====================
bot.callbackQuery('button_calculator', async (ctx) => {
  ctx.session.calculatorStep = 1;
  ctx.session.calculator = {};
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤–æ–π —Ä–∞—Å—Ö–æ–¥ –≥–∞–∑–∞ –≤ –º¬≥:', {
    reply_markup: new InlineKeyboard().text('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', 'start'),
  });
});

// ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ====================
// bot.on('message:text', async (ctx) => {});

// ==================== –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ====================
bot.on('message:text', async (ctx) => {
  if (ctx.session.calculatorStep) {
    const text = ctx.message.text.replace(',', '.');
    const value = parseFloat(text);
    if (isNaN(value) || value <= 0)
      return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');

    switch (ctx.session.calculatorStep) {
      case 1:
        ctx.session.calculator!.consumptionYear = value;
        ctx.session.calculatorStep = 3;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∑–∞ 1 –º¬≥ –≥–∞–∑–∞ (—Ä—É–±/–º¬≥):', {
          reply_markup: new InlineKeyboard().text(
            '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ',
            'start',
          ),
        });
        break;
      case 3:
        ctx.session.calculator!.pricePerM3 = value;
        ctx.session.calculatorStep = 4;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (—Ä—É–±):', {
          reply_markup: new InlineKeyboard().text(
            '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ',
            'start',
          ),
        });
        break;
      case 4:
        ctx.session.calculator!.equipmentCost = value;

        if (ctx.session.calculator) {
          const result = calcPayback({
            consumptionYear: ctx.session.calculator.consumptionYear || 0,
            pricePerM3: ctx.session.calculator.pricePerM3 || 0,
            equipmentCost: ctx.session.calculator.equipmentCost,
          });
          await ctx.reply(
            `üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:
–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${result.current.toFixed(2).toLocaleString()} —Ä—É–±
–ù–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${result.newCost.toFixed(2).toLocaleString()} —Ä—É–±
–≠–∫–æ–Ω–æ–º–∏—è: ${result.economy.toFixed(2).toLocaleString()} —Ä—É–±
–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ${result.paybackYears.toFixed(2)} –ª–µ—Ç (${result.paybackMonths.toFixed(0)} –º–µ—Å.)`,
            {
              reply_markup: new InlineKeyboard().text(
                '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ',
                'start',
              ),
            },
          );

          delete ctx.session.calculatorStep;
          delete ctx.session.calculator;
          break;
        }
    }
    return;
  }
  // ======= –°–µ—Ä–≤–∏—Å–Ω–∞—è –∑–∞—è–≤–∫–∞ =======
  if (
    ctx.session.selectedGas === '–ó–∞—è–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É –ê–ì–°' &&
    !ctx.session.contacts
  ) {
    ctx.session.contacts = ctx.message.text;
    await ctx.reply(
      '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
    );

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ amoCRM
    await sendToAmoCRM(ctx.session);
    await sendService(ctx.session);
    // –û—á–∏—Å—Ç–∫–∞
    ctx.session = {};
    return;
  }
  // bot.on('message:text', async (ctx) => {
  if (!ctx.session.performance && ctx.session.knowsParams) {
    ctx.session.performance = ctx.message.text;
    await ctx.reply('2. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É —Ä–æ—Å—ã (-40 –∏–ª–∏ -70):');
  } else if (!ctx.session.dewPoint && ctx.session.performance) {
    ctx.session.dewPoint = ctx.message.text;
    await ctx.reply('3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ (MPa):');
  } else if (!ctx.session.pressure && ctx.session.dewPoint) {
    ctx.session.pressure = ctx.message.text;
    await ctx.reply('4. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É –≥–∞–∑–∞ (%):');
  } else if (!ctx.session.purity && ctx.session.pressure) {
    ctx.session.purity = ctx.message.text;
    await ctx.reply('5. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω, email):');
  } else if (!ctx.session.contacts) {
    ctx.session.contacts = ctx.message.text;
    await ctx.reply(
      '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω–æ–π –¥–ª—è –Ω–∞—Å.',
    );
  } else if (!ctx.session.information) {
    ctx.session.information = ctx.message.text;

    await ctx.reply(
      '‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω–∂–µ–Ω–µ—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –°–ø–∞—Å–∏–±–æ. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      {
        reply_markup: new InlineKeyboard().text('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', 'start'),
      },
    );
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ amoCRM

    await sendToAmoCRM(ctx.session); // –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
    await sendService(ctx.session);
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {};
  }
});

// ==================== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ amoCRM ====================
async function sendToAmoCRM(data: SessionData) {
  if (!data.contacts) {
    console.error('–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    return;
  }

  // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email
  const phoneMatch = data.contacts.match(/(\+?\d[\d\-\s]{7,})/);
  const emailMatch = data.contacts.match(
    /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/,
  );

  const noteParts = [
    `–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${data.selectedGas || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`,
    `–û—Ç—Ä–∞—Å–ª—å: ${data.industry || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`,
    `–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data.performance || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`,
    `–¢–æ—á–∫–∞ —Ä–æ—Å—ã: ${data.dewPoint || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`,
    `–î–∞–≤–ª–µ–Ω–∏–µ: ${data.pressure || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`,
    `–ß–∏—Å—Ç–æ—Ç–∞: ${data.purity || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`,
    `–ö–æ–Ω—Ç–∞–∫—Ç—ã: ${phoneMatch?.[0]}  ${emailMatch?.[0]}`,
    `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${data.information || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`,
  ];

  //TODO –∑–∞–ø–æ–ª–Ω—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ª–∏–¥–∞ "Telegram"
  const lead: Lead = {
    // name: `–ó–∞—è–≤–∫–∞ –Ω–∞ ${data.selectedGas || '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'}`,
    name:
      data.selectedGas === '–ó–∞—è–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É –ê–ì–°'
        ? '–°–µ—Ä–≤–∏—Å–Ω–∞—è –∑–∞—è–≤–∫–∞'
        : `–ó–∞—è–≤–∫–∞ –Ω–∞ ${data.selectedGas || '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'}`,
    pipeline_id: 5716552, // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –Ω—É–∂–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏
    status_id: 50238949, // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    tags: [data.selectedGas || '–ë–µ–∑ —Ç–µ–≥–∞'],
    // notes: noteParts.join('\n'),
    notes:
      data.selectedGas === '–ó–∞—è–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É –ê–ì–°'
        ? `–°–µ—Ä–≤–∏—Å–Ω–∞—è –∑–∞—è–≤–∫–∞:\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: ${data.contacts}`
        : noteParts.join('\n'),
    sourceLead: {
      value: 'Telegram',
      field_id: 595185,
      enum_id: 836051,
    },
  };

  try {
    await sendToAmoFromApi(lead); // –ø–µ—Ä–µ–¥–∞—ë–º –ø—É—Å—Ç–æ–π user, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    console.log('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ amoCRM');
  } catch (error) {
    if (error instanceof Error)
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ amoCRM:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
