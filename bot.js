require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const otrasl = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –º—ã –ø–æ–π–º–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:'
const stoimostN2 = '–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∑–æ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≤–∏—Å—Ç –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–∞–º –∏–∑–≤–µ—Å—Ç–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º3/—á–∞—Å, —Ç–æ—á–∫–∞ —Ä–æ—Å—ã, –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞—Ä–∞—Ö, —á–∏—Å—Ç–æ—Ç–∞ –≥–∞–∑–∞?'
const stoimostO2 = '–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≤–∏—Å—Ç –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–∞–º –∏–∑–≤–µ—Å—Ç–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º3/—á–∞—Å, —Ç–æ—á–∫–∞ —Ä–æ—Å—ã, –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞—Ä–∞—Ö, —á–∏—Å—Ç–æ—Ç–∞ –≥–∞–∑–∞?'
const stoimostVod = '–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–¥–æ—Ä–æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≤–∏—Å—Ç –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–∞–º –∏–∑–≤–µ—Å—Ç–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º3/—á–∞—Å, —Ç–æ—á–∫–∞ —Ä–æ—Å—ã, –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞—Ä–∞—Ö, —á–∏—Å—Ç–æ—Ç–∞ –≥–∞–∑–∞?'
const stoimostOsu = '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—É—à–∏—Ç–µ–ª—è –∑–∞–≤–∏—Å—Ç –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–∞–º –∏–∑–≤–µ—Å—Ç–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º3/—á–∞—Å, —Ç–æ—á–∫–∞ —Ä–æ—Å—ã, –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞—Ä–∞—Ö, —á–∏—Å—Ç–æ—Ç–∞ –≥–∞–∑–∞?'
// API-–∫–ª—é—á OpenAI
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
// API-–∫–ª—é—á Telegram-–±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);


function DaNet() {
  bot.callbackQuery('button_no', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏–∏—Ç–µ –Ω–∞–º:');
    const keyboard = new InlineKeyboard()
      .url('–ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞', 'https://agse.ru')
      .row();

    await ctx.reply('üìû', {
      reply_markup: keyboard,
    });
  });
  bot.on('message', async (ctx) => {
    console.log(ctx.message);
  });

  bot.callbackQuery('button_yes', async (ctx) => {
      await ctx.reply('1. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–º3/—á–∞—Å?');
      await ctx.reply('2. –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–æ—á–∫—É —Ä–æ—Å—ã (-40 –∏–ª–∏ -70).');
      await ctx.reply('3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –≤ MPa.');
      await ctx.reply('4. –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —á–∏—Å—Ç–æ—Ç—É –≥–∞–∑–∞.');
  });
}

function DaNetOsush() {
  bot.callbackQuery('button_noOsush', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏–∏—Ç–µ –Ω–∞–º:');
    const keyboard = new InlineKeyboard()
      .url('–ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞', 'https://agse.ru')
      .row();

    await ctx.reply('üìû', {
      reply_markup: keyboard,
    });
  });
  bot.on('message', async (ctx) => {
    console.log(ctx.message);
  });

  bot.callbackQuery('button_yesOsush', async (ctx) => {
      await ctx.reply('1. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–º3/—á–∞—Å?');
      await ctx.reply('2. –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–æ—á–∫—É —Ä–æ—Å—ã (-40 –∏–ª–∏ -70).');
      await ctx.reply('3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –≤ MPa.');
  });
}


//
bot.command('start', async (ctx) => {
  // await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç');
  const keyboard = new InlineKeyboard()
    .text('N2', 'button_N2')
    .row()
    .text('O2', 'button_O2')
    .row()
    .text('–í–æ–¥–æ—Ä–æ–¥', 'button_vod')
    .row()
    .text('–û—Å—É—à–∫–∞', 'button_osu')
    .row();
  await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:', {
    reply_markup: keyboard,
  });
});

//–ë–õ–û–ö –ê–ó–û–¢
bot.callbackQuery('button_N2', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–õ–∞–∑–µ—Ä–Ω–∞—è —Ä–µ–∑–∫–∞', 'button_laser')
    .row()
    .text('–ü–∏—â–µ–≤–∞—è', 'button_eda')
    .row()
    .text('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'button_electro')
    .row()
    .text('–ù–µ—Ñ—Ç–µ—Ö–∏–º–∏—è', 'button_neft')
    .row()
    .text('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', 'button_laba')
    .row()
    .text('–î—Ä—É–≥–æ–µ', 'button_other')
    .row();
  await ctx.reply(
    otrasl,
    {
      reply_markup: keyboard,
    },
  );
});
bot.callbackQuery('button_laser', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimost,
    {
      reply_markup: keyboard,
    },
  );
});
DaNet();

bot.callbackQuery('button_eda', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostN2,
    {
      reply_markup: keyboard,
    },
  );
});
DaNet();

bot.callbackQuery('button_electro', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostN2,
    {
      reply_markup: keyboard,
    },
  );
});
DaNet();

bot.callbackQuery('button_neft', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostN2,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();

bot.callbackQuery('button_laba', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostN2,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();

bot.callbackQuery('button_other', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostN2,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();


//–ë–õ–û–ö –ö–ò–°–õ–û–†–û–î
bot.callbackQuery('button_O2', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–†—ã–±–æ—Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'button_fish')
    .row()
    .text('–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', 'button_metal')
    .row()
    .text('–î—Ä—É–≥–æ–µ', 'button_other')
    .row()
  await ctx.reply(
    otrasl,
    {
      reply_markup: keyboard,
    },
  );
});
bot.callbackQuery('button_fish', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostO2,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();
bot.callbackQuery('button_metal', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostO2,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();
bot.callbackQuery('button_other', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostO2,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();


//–ë–õ–û–ö –í–û–î–û–†–û–î
bot.callbackQuery('button_vod', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', 'button_energetika')
    .row()
    .text('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'button_electro')
    .row()
    .text('–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', 'button_metal')
    .row()
    .text('–ù–µ—Ñ—Ç–µ—Ö–∏–º–∏—è', 'button_neftehim')
    .row()
    .text('–ü–æ—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏–∑–Ω—ã—Ö —è—á–µ–µ–∫ ERRE DUE', 'button_zapchast')
    .row();
  await ctx.reply(
    otrasl,
    {
      reply_markup: keyboard,
    },
  );
});
bot.callbackQuery('button_energetika', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostVod,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();
bot.callbackQuery('button_electro', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostVod,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();
bot.callbackQuery('button_metal', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≤–∏—Å—Ç –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–∞–º –∏–∑–≤–µ—Å—Ç–Ω—ã –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–π –æ–±—ä–µ–º, —á–∏—Å—Ç–æ—Ç–∞ –≥–∞–∑–∞ –∏ –¥–∞–≤–ª–µ–Ω–∏–µ?',
    {
      reply_markup: keyboard,
    },
  );
});
DaNet();
bot.callbackQuery('button_neftehim', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yes')
    .row()
    .text('–ù–ï–¢', 'button_no')
    .row();

  await ctx.reply(
    stoimostVod,
        {
      reply_markup: keyboard,
    },
  );
});
DaNet();
bot.callbackQuery('button_zapchast', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('G13', 'button_G13')
    .row()
    .text('G16', 'button_G16')
    .row()
    .text('G24', 'button_G24')
    .row()
    .text('G32', 'button_G32')
    .row()
    .text('–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', 'button_callMe')
    .row();
  await ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–ª–∏–∑–µ—Ä–∞:',
    {
      reply_markup: keyboard,
    },
  );
});
bot.callbackQuery('button_G13', async (ctx) => {
  await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —à–∏–ª—å–¥–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏–∑–µ—Ä–∞ (–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ).');
});
bot.callbackQuery('button_G16', async (ctx) => {
  await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —à–∏–ª—å–¥–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏–∑–µ—Ä–∞ (–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ).');
});
bot.callbackQuery('button_G24', async (ctx) => {
  await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —à–∏–ª—å–¥–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏–∑–µ—Ä–∞ (–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ).');
});
bot.callbackQuery('button_G32', async (ctx) => {
  await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —à–∏–ª—å–¥–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏–∑–µ—Ä–∞ (–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ).');
});
bot.callbackQuery('button_callMe', async (ctx) => {
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º:');
  const keyboard = new InlineKeyboard()
    .url('–ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞', 'https://agse.ru')
    .row();

  await ctx.reply('üìû', {
    reply_markup: keyboard,
  });
});
bot.on('message', async (ctx) => {
  console.log(ctx.message);
});
DaNet()

//–ë–õ–û–ö –û–°–£–®–ò–¢–ï–õ–¨
bot.callbackQuery('button_osu', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–ê–¥—Å–æ—Ä–±—Ü–∏–æ–Ω–Ω—ã–π —Å —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π', 'button_ahr')
    .row()
    .text('–ê–¥—Å–æ—Ä–±—Ü–∏–æ–Ω–Ω—ã–π —Å –≥–æ—Ä—è—á–µ–π —Ä–µ–≥–µ–Ω–∞—Ä–∏—Ü–∏–µ–π', 'button_agr')
    .row()
  await ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –æ—Å—É—à–∏—Ç–µ–ª—è:',
    {
      reply_markup: keyboard,
    },
  )
});
bot.callbackQuery('button_ahr', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yesOsush')
    .row()
    .text('–ù–ï–¢', 'button_noOsush')
    .row()

  await ctx.reply(
    stoimostOsu,
        {
      reply_markup: keyboard,
    },
  );
});
DaNetOsush();
bot.callbackQuery('button_agr', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–î–ê', 'button_yesOsush')
    .row()
    .text('–ù–ï–¢', 'button_noOsush')
    .row()

  await ctx.reply(
    stoimostOsu,
        {
      reply_markup: keyboard,
    },
  );
});
DaNetOsush();

bot.start();
